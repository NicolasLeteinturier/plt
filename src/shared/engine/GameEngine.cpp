#include <queue>

///////////////////////////////////////////////////////////////////////////////////////////////////

// Generated by dia2code
#ifndef ENGINE__GAMEENGINE__H
#define ENGINE__GAMEENGINE__H

#include <memory>

namespace state {
  class GameState;
};
namespace engine {
  class Command;
}

#include "../state/GameState.h"
#include "Command.h"

namespace engine {

  /// class GameEngine - 
  class GameEngine {
    // Associations
    // Attributes
  public:
    std::shared_ptr<state::GameState> gameState;
    std::queue<std::shared_ptr<Command>> commands;
    // Operations
  public:
    GameEngine ();
    void ExecuteCommands ();
  private:
    void ExecuteAttackCommand ();
    void ExecuteMovementCommand ();
    void ExecuteReinforcementCommand ();
    void ExecuteInitialisationCommand ();
    int GetCountryClicked (int mousePositionX, int mousePositionY);
    // Setters and Getters
  };

};

#endif
/////////////////////////////////////////////////////////////////////////////////////////////////

#include "../../define.h"
#include <iostream>
#include <SFML/Graphics.hpp>

using namespace engine;
using namespace state;

GameEngine::GameEngine()
{

}

void GameEngine::ExecuteCommands()
{
	/*if(commands.size()!=0)
	{
		std::shared_ptr<Command> command = commands[0];
		commands.erase(commands.begin());
		if(command->pressedKey == KeyPressed::SPACE_BARRE)
		{
			gameState->GoToNextAction();
		}
		if(command->pressedKey == KeyPressed::LEFT_CLICK || command->pressedKey == KeyPressed::RIGHT_CLICK)
		{
			sf::Image image;
			char table[NB_COUNTRY][40] = {COUNTRY_SPRITE_RESSOURCES};
			char country_name[NB_COUNTRY][40] = {COUNTRY_NAME};
			for (int i = 0; i < NB_COUNTRY; i++) { 
				if (!(image.loadFromFile(table[i])))
          				printf("Cannot load image");
				if(image.getPixel(command->mousePositionX,command->mousePositionY) != sf::Color::Transparent && image.getPixel(command->mousePositionX,command->mousePositionY) != sf::Color::White && image.getPixel(command->mousePositionX,command->mousePositionY) != sf::Color::Black)
					std::cout << country_name[i] << std::endl;
			}

		}
	}*/
	if(commands.empty())
	{
		return;
	}

	unsigned int n = commands.size();

	for(unsigned int i = 0; i < n-1; i++)
	{
		if(gameState->currentAction->GetActionType() == ActionType::_INITIALISATION)
		{
			ExecuteInitialisationCommand();
			commands.pop();
		}

		else if(gameState->currentAction->GetActionType() == ActionType::_REINFORCEMENTS)
		{
			ExecuteReinforcementCommand();
			commands.pop();
		}

		else if(gameState->currentAction->GetActionType() == ActionType::_ATTACK)
		{
			ExecuteAttackCommand();
			commands.pop();
		}

		else if(gameState->currentAction->GetActionType() == ActionType::_MOVEMENT)
		{
			ExecuteMovementCommand();
			commands.pop();
		}
	}

	return;
}

void GameEngine::ExecuteAttackCommand()
{
	std::shared_ptr<Command> command = commands.front();
	std::cout << "Attack execution" << std::endl;
	gameState->GoToNextAction();
}


void GameEngine::ExecuteMovementCommand()
{
	std::shared_ptr<Command> command = commands.front();
	std::cout << "Movement execution" << std::endl;
	gameState->GoToNextAction();
}


void GameEngine::ExecuteReinforcementCommand()
{
	std::shared_ptr<Command> command = commands.front();
	std::cout << "Reinforcement execution" << std::endl;
	gameState->GoToNextAction();
}


void GameEngine::ExecuteInitialisationCommand()
{
	std::shared_ptr<Command> command = commands.front();
	std::cout << "Initialisation execution" << std::endl;
	gameState->GoToNextAction();
}


int GameEngine::GetCountryClicked(int mousePositionX, int mousePositionY)
{
	sf::Image image;
	char table[NB_COUNTRY][40] = {COUNTRY_SPRITE_RESSOURCES};
	//char country_name[NB_COUNTRY][40] = {COUNTRY_NAME};
	for (int i = 0; i < NB_COUNTRY; i++) { 
		if (!(image.loadFromFile(table[i])))
          		printf("Cannot load image");
		if(image.getPixel(mousePositionX,mousePositionY) != sf::Color::Transparent)
		{
			//std::cout << country_name[i] << std::endl;
			return(i);
		}
	}
	return(-1);
}






