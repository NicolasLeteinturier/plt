#include <queue>

///////////////////////////////////////////////////////////////////////////////////////////////////

// Generated by dia2code
#ifndef ENGINE__GAMEENGINE__H
#define ENGINE__GAMEENGINE__H

#include <memory>

namespace state {
  class GameState;
};
namespace engine {
  class Command;
}

#include "../state/GameState.h"
#include "Command.h"

namespace engine {

  /// class GameEngine - 
  class GameEngine {
    // Associations
    // Attributes
  public:
    std::shared_ptr<state::GameState> gameState;
    std::queue<std::shared_ptr<Command>> commands;
    // Operations
  public:
    GameEngine ();
    void ExecuteCommands ();
  private:
    void ExecuteAttackCommand ();
    void ExecuteMovementCommand ();
    void ExecuteReinforcementCommand ();
    void ExecuteInitialisationCommand ();
    int GetCountryClicked (int mousePositionX, int mousePositionY);
    // Setters and Getters
  };

};

#endif
/////////////////////////////////////////////////////////////////////////////////////////////////

#include "../../define.h"
#include <iostream>
#include <SFML/Graphics.hpp>
#include "../state/Movement.h"
#include "../state/Attack.h"
#include "../state/Initialisation.h"
#include "../state/Reinforcements.h"

unsigned int etat = 0;

using namespace engine;
using namespace state;

GameEngine::GameEngine()
{

}

void GameEngine::ExecuteCommands()
{
	/*if(commands.size()!=0)
	{
		std::shared_ptr<Command> command = commands[0];
		commands.erase(commands.begin());
		if(command->pressedKey == KeyPressed::SPACE_BARRE)
		{
			gameState->GoToNextAction();
		}
		if(command->pressedKey == KeyPressed::LEFT_CLICK || command->pressedKey == KeyPressed::RIGHT_CLICK)
		{
			sf::Image image;
			char table[NB_COUNTRY][40] = {COUNTRY_SPRITE_RESSOURCES};
			char country_name[NB_COUNTRY][40] = {COUNTRY_NAME};
			for (int i = 0; i < NB_COUNTRY; i++) { 
				if (!(image.loadFromFile(table[i])))
          				printf("Cannot load image");
				if(image.getPixel(command->mousePositionX,command->mousePositionY) != sf::Color::Transparent && image.getPixel(command->mousePositionX,command->mousePositionY) != sf::Color::White && image.getPixel(command->mousePositionX,command->mousePositionY) != sf::Color::Black)
					std::cout << country_name[i] << std::endl;
			}

		}
	}*/
	if(commands.empty())
	{
		return;
	}

	unsigned int n = commands.size();

	for(unsigned int i = 0; i < n; i++)
	{
		if(gameState->currentAction->GetActionType() == ActionType::_INITIALISATION)
		{
			ExecuteInitialisationCommand();
			commands.pop();
		}

		else if(gameState->currentAction->GetActionType() == ActionType::_REINFORCEMENTS)
		{
			ExecuteReinforcementCommand();
			commands.pop();
		}

		else if(gameState->currentAction->GetActionType() == ActionType::_ATTACK)
		{
			ExecuteAttackCommand();
			commands.pop();
		}

		else if(gameState->currentAction->GetActionType() == ActionType::_MOVEMENT)
		{
			ExecuteMovementCommand();
			commands.pop();
		}
	}

	return;
}

void GameEngine::ExecuteAttackCommand()
{
	std::shared_ptr<Command> command = commands.front();
	gameState->GoToNextAction();
}


void GameEngine::ExecuteMovementCommand()
{
	std::shared_ptr<Command> command = commands.front();
	
	if(command->pressedKey == KeyPressed::SPACE_BARRE)
	{
		gameState->GoToNextAction();
		etat = 0;
	}

	if(command->pressedKey == KeyPressed::ESCAPE)
	{
		etat = 0;
	}

	// etat vaut 0 : selection du pays d'origine
	if(etat == 0 && command->pressedKey == KeyPressed::LEFT_CLICK)
	{
		int country_index = GetCountryClicked(command->mousePositionX,command->mousePositionY);
		if(country_index == -1){return;}
		std::shared_ptr<Country> selected_country = gameState->listCountry[country_index];
		if(selected_country->owner != gameState->currentPlayer)
		{
			printf("ce pays ne vous appartient pas\n");
			return;
		}
		std::shared_ptr<Movement> movement = std::dynamic_pointer_cast<Movement>(gameState->currentAction);
		movement->origin = selected_country;
		etat = 1;
		return;
	}

	// etat vaut 1 : selection du pays de destination

	if(etat == 1 && command->pressedKey == KeyPressed::LEFT_CLICK)
	{
		int country_index = GetCountryClicked(command->mousePositionX,command->mousePositionY);
		if(country_index == -1){return;}
		std::shared_ptr<Country> selected_country = gameState->listCountry[country_index];
		if(selected_country->owner != gameState->currentPlayer)
		{
			printf("ce pays ne vous appartient pas\n");
			return;
		}
		std::shared_ptr<Movement> movement = std::dynamic_pointer_cast<Movement>(gameState->currentAction);
		movement->destination = selected_country;
		movement->unitSelected = true;
		etat = 2;
		return;
	}

	// etat vaut 2 : selection des unités

	if(etat == 2 && command->pressedKey == KeyPressed::LEFT_CLICK)
	{
		std::shared_ptr<Movement> movement = std::dynamic_pointer_cast<Movement>(gameState->currentAction);

		if(command->mousePositionX <= 405 && command->mousePositionX >= 245)
		{
			if(command->mousePositionY <= 190 && command->mousePositionY >= 90)
			{
				for(unsigned int i = 0; i < movement->origin->listUnit.size(); i++)
				{
					if(movement->origin->listUnit[i]->type == Type::defensif)
					{
						movement->AddUnitToMove(movement->origin->listUnit[i]);
						break;
					}
				}
				return;
			}

			else if(command->mousePositionY <= 500 && command->mousePositionY >= 400)
			{
				for(unsigned int i = 0; i < movement->units.size(); i++)
				{
					if(movement->units[i]->type == Type::defensif)
					{
						movement->origin->AddUnit(movement->units[i]);
						movement->units.erase(movement->units.begin() + i);
						break;
					}
				}
				return;
			}

			else {return;}
		}

		else if(command->mousePositionX <= 680 && command->mousePositionX >= 520)
		{
			if(command->mousePositionY <= 190 && command->mousePositionY >= 90)
			{
				for(unsigned int i = 0; i < movement->origin->listUnit.size(); i++)
				{
					if(movement->origin->listUnit[i]->type == Type::neutre)
					{
						movement->AddUnitToMove(movement->origin->listUnit[i]);
						break;
					}
				}
				return;
			}

			else if(command->mousePositionY <= 500 && command->mousePositionY >= 400)
			{
				for(unsigned int i = 0; i < movement->units.size(); i++)
				{
					if(movement->units[i]->type == Type::neutre)
					{
						movement->origin->AddUnit(movement->units[i]);
						movement->units.erase(movement->units.begin() + i);
						break;
					}
				}
				return;
			}

			else {return;}
		}

		else if(command->mousePositionX <= 930 && command->mousePositionX >= 770)
		{
			if(command->mousePositionY <= 190 && command->mousePositionY >= 90)
			{
				for(unsigned int i = 0; i < movement->origin->listUnit.size(); i++)
				{
					if(movement->origin->listUnit[i]->type == Type::attaquant)
					{
						movement->AddUnitToMove(movement->origin->listUnit[i]);
						break;
					}
				}
				return;
			}

			else if(command->mousePositionY <= 500 && command->mousePositionY >= 400)
			{
				for(unsigned int i = 0; i < movement->units.size(); i++)
				{
					if(movement->units[i]->type == Type::attaquant)
					{
						movement->origin->AddUnit(movement->units[i]);
						movement->units.erase(movement->units.begin() + i);
						break;
					}
				}
				return;
			}

			else {return;}
		}

		/*if(movement->origin->listUnit.size() != 0)
		{
			movement->AddUnitToMove(movement->origin->listUnit[0]);
		}*/
	}

	// touche entrée appuyer : deplacement des unités sélectionnés et fin du tour

	if(etat == 2 && command->pressedKey == KeyPressed::ENTER)
	{
		std::shared_ptr<Movement> movement = std::dynamic_pointer_cast<Movement>(gameState->currentAction);
		movement->unitSelected = false;
		movement->MoveAllUnit();
		gameState->GoToNextAction();
		etat = 0;
	}
}


void GameEngine::ExecuteReinforcementCommand()
{
	/*std::shared_ptr<Command> command = commands.front();

	std::shared_ptr<Reinforcements> reinforcement = std::dynamic_pointer_cast<Reinforcements>(gameState->currentAction);
	
	if(reinforcement->availableUnits.size() == 0 || command->pressedKey == KeyPressed::SPACE_BARRE)
	{
		reinforcement->unitSelected = false;*/
		gameState->GoToNextAction();
		etat = 0;
	/*}

	if(etat == 0 && command->pressedKey == KeyPressed::LEFT_CLICK)
	{
		int country_index = GetCountryClicked(command->mousePositionX,command->mousePositionY);
		if(country_index == -1){return;}
		std::shared_ptr<Country> selected_country = gameState->listCountry[country_index];
		if(selected_country->owner != gameState->currentPlayer)
		{
			printf("ce pays ne vous appartient pas");
			return;
		}
		reinforcement->unitSelected = true;
		etat = 1;
		return;
	}

	if(etat == 1 && command->pressedKey == KeyPressed::LEFT_CLICK)
	{
		//reinforcement->PlaceUnit(reinforcement->availableUnits[0],)
	}*/

}


void GameEngine::ExecuteInitialisationCommand()
{
	std::shared_ptr<Command> command = commands.front();
	gameState->GoToNextAction();
}


int GameEngine::GetCountryClicked(int mousePositionX, int mousePositionY)
{
	sf::Image image;
	char table[NB_COUNTRY][40] = {COUNTRY_SPRITE_RESSOURCES};
	char country_name[NB_COUNTRY][40] = {COUNTRY_NAME};
	for (int i = 0; i < NB_COUNTRY; i++) { 
		if (!(image.loadFromFile(table[i])))
          		printf("Cannot load image");
		if(image.getPixel(mousePositionX,mousePositionY) != sf::Color::Transparent)
		{
			std::cout << country_name[i] << std::endl;
			return(i);
		}
	}
	return(-1);
}






